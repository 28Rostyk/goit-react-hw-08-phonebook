{"version":3,"file":"static/js/319.cf64761c.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","webpack://react-homework-template/./src/components/Contacts/ContactForm/ContactForm.module.css?4d46","components/Contacts/ContactForm/ContactForm.jsx","redux/filter/filter-selectors.js","webpack://react-homework-template/./src/components/Contacts/ContactList/ContactList.module.css?357e","components/Contacts/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Contacts/Filter/Filter.module.css?8ad8","components/Contacts/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Contacts/Contacts.module.css?5e71","components/Contacts/Contacts.jsx"],"sourcesContent":["export const getAllContacts = ({ contacts }) => contacts.items;\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.items;\n  }\n\n  const normalizedFilter = filter.toLowerCase();\n  const result = contacts.items.filter(({ name }) => {\n    return name.toLowerCase().includes(normalizedFilter);\n  });\n  return result;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"addForm\":\"ContactForm_addForm__DC0qI\",\"addInput\":\"ContactForm_addInput__ItTl5\",\"addButton\":\"ContactForm_addButton__YOtQ2\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchAddContact } from 'redux/contacts/contacts-operations';\nimport { getAllContacts } from 'redux/contacts/contacts-selectors';\nimport { nanoid } from 'nanoid';\nimport css from './ContactForm.module.css';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const [{ name, number }, setState] = useState({ ...INITIAL_STATE });\n  const contacts = useSelector(getAllContacts);\n  const dispatch = useDispatch();\n\n  function onChange(e) {\n    const { name, value } = e.target;\n    setState(prevState => ({ ...prevState, [name]: value }));\n  }\n\n  function onSubmit(e) {\n    e.preventDefault();\n    const newContact = {\n      name,\n      number,\n    };\n\n    dispatch(fetchAddContact({ name, number }));\n\n    if (contacts.some(contact => contact.name === newContact.name)) {\n      console.log(contacts.name);\n      setState({ name, number });\n    } else {\n      setState({ ...INITIAL_STATE });\n    }\n  }\n\n  const labelId = nanoid();\n  return (\n    <form className={css.addForm} onSubmit={onSubmit}>\n      <label htmlFor={labelId}>Name</label>\n      <input\n        className={css.addInput}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        id={labelId}\n        onChange={onChange}\n      />\n      <label htmlFor={labelId}>Phone</label>\n      <input\n        className={css.addInput}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        id={labelId}\n        onChange={onChange}\n      />\n      <button className={css.addButton}>Add contact</button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","export const getFilter = ({ filter }) => filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__Xc7yH\",\"contactItem\":\"ContactList_contactItem__TpIoF\",\"contactName\":\"ContactList_contactName__6uKOS\",\"contactNumber\":\"ContactList_contactNumber__7y6Tr\",\"delButton\":\"ContactList_delButton__WYBKA\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilteredContacts } from 'redux/contacts/contacts-selectors';\nimport { getFilter } from 'redux/filter/filter-selectors';\nimport { fetchDeleteContact } from 'redux/contacts/contacts-operations';\nimport css from './ContactList.module.css';\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(getFilteredContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  function contactsFillet() {\n    if (filter === '') {\n      return false;\n    }\n    return filteredContacts.filter(x => x.name.toLowerCase().includes(filter));\n  }\n\n  const fillter = contactsFillet();\n  const list = fillter ? fillter : filteredContacts;\n\n  return (\n    <ul className={css.contactList}>\n      {list.map(({ name, id, number }) => {\n        return (\n          <li key={id} className={css.contactItem}>\n            <span className={css.contactName}>{name}:</span>\n            <span className={css.contactNumber}>{number}</span>\n            <button\n              className={css.delButton}\n              onClick={() => dispatch(fetchDeleteContact(id))}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"Filter\":\"Filter_Filter__1UX1K\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/filter/filter-selectors';\nimport { setFilter } from 'redux/filter/filter-slice';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  return (\n    <label>\n      Find contacts by name\n      <input\n        value={filter}\n        className={css.Filter}\n        type=\"text\"\n        onChange={event =>\n          dispatch(setFilter(event.target.value.toLowerCase()))\n        }\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"Box\":\"Contacts_Box__VSrMr\",\"ContactsBox\":\"Contacts_ContactsBox__P809p\",\"notificationMessage\":\"Contacts_notificationMessage__V3rIG\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport ContactForm from './ContactForm';\nimport ContactList from './ContactList';\nimport Filter from './Filter';\n\nimport { fetchAllContacts } from 'redux/contacts/contacts-operations';\nimport { getAllContacts } from '../../redux/contacts/contacts-selectors';\nimport css from './Contacts.module.css';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const allContacts = useSelector(getAllContacts);\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.Box}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <div className={css.ContactsBox}>\n        <h2>Contacts</h2>\n\n        {allContacts.length > 0 && <Filter />}\n\n        <ContactList />\n        {allContacts.length === 0 && (\n          <p className={css.notificationMessage}>\n            There are no contacts in your phonebook\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["getAllContacts","contacts","items","getFilteredContacts","filter","normalizedFilter","toLowerCase","name","includes","INITIAL_STATE","number","useState","setState","useSelector","dispatch","useDispatch","onChange","e","target","value","prevState","labelId","nanoid","className","css","onSubmit","preventDefault","newContact","fetchAddContact","some","contact","console","log","htmlFor","type","pattern","title","required","id","getFilter","filteredContacts","fillter","x","list","map","onClick","fetchDeleteContact","event","setFilter","allContacts","useEffect","fetchAllContacts","length"],"sourceRoot":""}